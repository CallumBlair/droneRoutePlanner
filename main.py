#Import Libraries
from flask import Flask, render_template,request,redirect,url_for,jsonify,session,send_file
import geopandas
import controllerModule as cm
import json
import pandas as pd
from io import BytesIO

#Define the flask application
app = Flask(__name__)
app.secret_key = 'H}g7uZwOw/J05xD'
app.config['SESSION_TYPE'] = 'filesystem'

#Open the geojson file storing property details
gdf = geopandas.read_file("propertyDetails.geojson").to_json()

####################

@app.before_request
def before_request():
    if not request.is_secure and __name__ == "__main__":
        url = request.url.replace('http://', 'https://', 1)
        return redirect(url)

#####################


@app.route('/')
def index():
    """ Index Route.
    returns the index page of the website.
    """
    return render_template("index.html")

@app.route('/about')
def displayAbout():
    """ About page route.
    returns the about page of the website.
    """
    return render_template("about.html")

@app.route('/map')
def displayMap():
    """The map route.
    returns the map page.
    parameters:
        -boundaries: array storing the boundaries for a specific farm
        -username: session stored farm name
        -path: session stored path generated by the algorithm
    """
    boundaries = []
    
    try:
        username = session["userName"]
    except:
        username = "Please enter a location"
    try:
        path = session["path"]
    except:
        path = [1]
        
    featureArr = json.loads(gdf)
    
    for x in range (len(featureArr["features"])):
        if featureArr["features"][x]["properties"]["userName"] == username:
            boundaries.append(featureArr["features"][x])
            
    boundaries = json.dumps(boundaries)
    
    return render_template("map.html", boundaries=boundaries, path=path, username=username)


@app.route('/mapAuth' , methods = ["post"])
def displayMapAuth():
    """Authentication route.
    sets the session username to the name entered by the user
    redirects to the map route
    parameters:
        -username: retrieved from the post request    
    """
    session['userName'] = "init"
    username = request.form['userName']
    
    if username != session["userName"]:
        session["path"] = [1]
    session['userName'] = username
    
    return redirect("/map")


@app.route('/requestPath', methods = ["post"])
def requestPath():
    """Path request route.
    generates a path between the nodes requested by the user
    parameters:
        -username: session stores username
        -startNodeStr: the starting node retrieved from the form
        -targetNodeStr: the target node retrieved from the form
        -node1Arr: the starting node retrieved from the form
    """
    session["path"] = [1]
    username = session["userName"]
    startNodeStr = request.form['stNode']
    targetNodeStr = request.form['tgtNode']
    node1Arr = request.form['1Node'].split(",")
    node2Arr = request.form['2Node'].split(",")
    node3Arr = request.form['3Node'].split(",")
    node4Arr = request.form['4Node'].split(",")

    if(node1Arr == ["undefined"]):
        node1Arr = [0,0]

    if(node2Arr == ["undefined"]):
        node2Arr = [0,0]

    if(node3Arr == ["undefined"]):
        node3Arr = [0,0]

    if(node4Arr == ["undefined"]):
        node4Arr = [0,0]

    
    startNodeArr = startNodeStr.split(",")
    targetNodeArr = targetNodeStr.split(",")

    
    startNode = [float(startNodeArr[1]), float(startNodeArr[0])]
    targetNode = [float(targetNodeArr[1]), float(targetNodeArr[0])]
    
    node1 = [float(node1Arr[1]), float(node1Arr[0])]
    node2 = [float(node2Arr[1]), float(node2Arr[0])]
    node3 = [float(node3Arr[1]), float(node3Arr[0])]
    node4 = [float(node4Arr[1]), float(node4Arr[0])]
    
    path = cm.getRoute(startNode, targetNode, username, node1, node2, node3, node4)
    session['path'] = path

    return redirect("/map")


@app.route('/getRoute')
def getRoute():
    """
        Returns a csv file storing the current route
        parameters:
            -username: the current farm being used
            -path: array storing the path to be stored in the csv            
    """
    
    user = session["userName"]
    path = session["path"]
    
    if path != 1:
        dict = {"Path":path}
        df = pd.DataFrame(dict)
        response_stream = BytesIO(df.to_csv().encode())
        return send_file(
            response_stream,
            mimetype="text/csv",
            download_name = user + "path.csv")
                    


if __name__ == "__main__":
    
    app.run(debug=True)



